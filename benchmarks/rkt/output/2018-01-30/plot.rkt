#lang racket/base

;; Usage:
;;  `racket plot.rkt <DATA.rktd>`
;; where <DATA.rktd> is a file generated by `parse.rkt`

(require
  pict
  math/statistics
  gtp-util
  plot/utils
  plot/no-gui)

(define H (with-input-from-file "PARSED.rktd" read))

(define (make-plots)
  (filter values
    (for/list ((kv (sort (hash->list H) string<? #:key car)))
      (define k (car kv))
      (define v (cdr kv))
      (define sec (hash-ref v "master"))
      (define rkt (hash-ref v "6.12"))
      (define data
        (sort
          (for/list (((loops sec-time**) (in-hash sec))
                     #:when (or (hash-has-key? rkt loops)
                                (and (printf "Loops mis-match ~a ~a~n" k loops) #f)))
            (define rkt-time** (hash-ref rkt loops))
            (list loops (/ (mean (map car sec-time**))
                           (mean (map car rkt-time**)))))
          <
          #:key car))
      (and (not (null? data))
           (parameterize ((plot-font-size 16) (plot-x-ticks no-ticks) (plot-y-far-ticks no-ticks) (plot-x-far-ticks no-ticks))
             (plot-pict
               #:x-label "LOOPS"
               #:y-label "Overhead vs. 6.12"
               #:y-min 0
               #:y-max 2
               #:title k
               #:width 200
               #:height 200
               (list
                 (discrete-histogram
                   ;#:skip 1
                   #:x-min 0
                   #:x-max 4
                   #:color 4
                   (map list->vector data))
                 (hrule 1 #:color 0 #:width 1))))))))

(save-pict
  "yolo.png"
  (apply hb-append 4
         (map (lambda (p*) (apply vl-append 10 p*)) (columnize (make-plots) 10))))
